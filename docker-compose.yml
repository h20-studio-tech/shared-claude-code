version: '3.8'

services:
  # Main application
  claude-code-ui:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - CLOUD_MODE=true
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - API_KEY=${API_KEY:-}
      - DATABASE_URL=sqlite:///app/data/cloud.db
    volumes:
      # Persistent database storage
      - ./data:/app/data
      - ./config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (alternative to SQLite for production)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=claude_code_ui
      - POSTGRES_USER=claude_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-claude_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    profiles:
      - postgres  # Only start with --profile postgres

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - redis  # Only start with --profile redis

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - claude-code-ui
    restart: unless-stopped
    profiles:
      - nginx  # Only start with --profile nginx

volumes:
  postgres_data:
  redis_data:

# Usage examples:
# Basic SQLite deployment:
#   docker-compose up -d
#
# With PostgreSQL:
#   docker-compose --profile postgres up -d
#
# Full production setup with Nginx:
#   docker-compose --profile postgres --profile nginx up -d